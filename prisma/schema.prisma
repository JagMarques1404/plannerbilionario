generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USUÁRIOS
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gamificação
  xp     Int @default(0)
  level  Int @default(1)
  tokens Float @default(1000.0)

  // Financeiro Fictício
  balance       Float @default(100000.0)
  totalInvested Float @default(0)
  totalReturns  Float @default(0)

  // Relacionamentos
  missions      UserMission[]
  investments   Investment[]
  achievements  UserAchievement[]
  activities    Activity[]
  rankings      Ranking[]

  @@map("users")
}

// MISSÕES
model Mission {
  id          String  @id @default(cuid())
  title       String
  description String
  category    String  // daily, weekly, monthly
  type        String  // checkin, expense, investment, education
  xpReward    Int
  tokenReward Float
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())

  // Relacionamentos
  userMissions UserMission[]

  @@map("missions")
}

model UserMission {
  id          String    @id @default(cuid())
  userId      String
  missionId   String
  completedAt DateTime?
  progress    Float     @default(0) // 0-100%
  date        DateTime  @default(now())

  // Relacionamentos
  user    User    @relation(fields: [userId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId, date])
  @@map("user_missions")
}

// INVESTIMENTOS
model Investment {
  id           String   @id @default(cuid())
  userId       String
  name         String
  type         String   // real_estate, stocks, crypto, nft
  amount       Float
  currentValue Float
  returnRate   Float
  status       String   // active, completed, cancelled
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id])

  @@map("investments")
}

// CONQUISTAS
model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  category    String
  rarity      String // common, rare, epic, legendary
  criteria    Json   // Critérios para unlock
  xpReward    Int
  tokenReward Float

  // Relacionamentos
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// ATIVIDADES
model Activity {
  id          String   @id @default(cuid())
  userId      String
  type        String   // mission_completed, investment_made, level_up, achievement_unlocked
  description String
  metadata    Json?    // Dados adicionais
  createdAt   DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id])

  @@map("activities")
}

// RANKINGS
model Ranking {
  id        String   @id @default(cuid())
  userId    String
  category  String   // global, weekly, monthly, investments
  position  Int
  score     Float
  period    String   // 2024-01, 2024-W01, etc
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, category, period])
  @@map("rankings")
}

// CONFIGURAÇÕES SANDBOX
model SandboxConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt

  @@map("sandbox_config")
}
